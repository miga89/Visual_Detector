%% Import data from text file.
% Script for importing data from the following text file:
%
%    E:\Eigene Dateien\Visual Studio 2012\Projects\sample1\sample1\data.txt
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2016/01/14 14:26:56
clear all;
close all;
%% Initialize variables.
filename = 'E:\Eigene Dateien\Visual Studio 2012\Projects\sample1\sample1\data.txt';
delimiter = ' ';
startRow = 2;

%% Format string for each line of text:
%   column1: double (%f)
%	column2: double (%f)
%   column3: double (%f)
%	column4: double (%f)
%   column5: double (%f)
%	column6: double (%f)
%   column7: double (%f)
%	column8: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%f%f%f%f%f%f%f%f%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'MultipleDelimsAsOne', true, 'HeaderLines' ,startRow-1, 'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Allocate imported array to column variable names
x1 = dataArray{:, 1};
y1 = dataArray{:, 2};
t1 = dataArray{:, 3};
case1 = dataArray{:, 4};
x_pre = dataArray{:, 5};
y_pre = dataArray{:, 6};
x_cor = dataArray{:, 7};
y_cor = dataArray{:, 8};

dbg = case1;
%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans;


%% My code

% delete all entries where no object was detected
x_f = []; 
y_f = [];
t_f = [];
x_pre_f = [];
y_pre_f = [];
x_cor_f = [];
y_cor_f = [];

for i=1:length(x1)
    
    if dbg(i) == 2 || dbg(i) ==3;
        x_f = [x_f,x1(i)];
        y_f = [y_f,y1(i)];
        t_f = [t_f,t1(i)];
        x_pre_f = [x_pre_f,x_pre(i)];
        y_pre_f = [y_pre_f,y_pre(i)];
        x_cor_f = [x_cor_f,x_cor(i)];
        y_cor_f = [y_cor_f,y_cor(i)];

    end
end

figure(1);
subplot(2,1,1);
plot(t_f,x_f,'b.-',t_f,x_pre_f,'r.-',t_f,x_cor_f,'g.-');
title('x(t)'); xlabel('t[s]'), ylabel('x [mm]');grid on;
legend('True','Predicted','Corrected');
subplot(2,1,2);
plot(t_f,y_f,'b.-',t_f,y_pre_f,'r.-',t_f,y_cor_f,'g.-');
title('y(t)'); xlabel('t [s]'), ylabel('y [mm]');grid on;
legend('True','Predicted','Corrected');

figure(2);
grid on
plot(x_f,y_f,'b.-',x_pre_f,y_pre_f,'r.-',x_cor_f,y_cor_f,'g.-');hold on;
axis([-200 4200 -200 2200])
set(gca,'DataAspectRatio',[1 1 1])
legend('True','Predicted','Corrected');

title('x(t) vs. y(t)'); xlabel('x[mm]'), ylabel('y [mm]');grid on;
